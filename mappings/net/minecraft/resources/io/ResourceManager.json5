{
	source: "net/minecraft/class_3300",
	name: "net/minecraft/resources/io/ResourceManager",
	comments: "Provides resource loading capabilities to Minecraft.",
	methods: [
		{
			source: "method_14487",
			name: "getNamespaces",
			descriptor: "()Ljava/util/Set;",
			comments: "{@return a set of all the namespaces offered by the resource packs loaded by this manager}"
		},
		{
			source: "method_14489",
			name: "getAllResources",
			descriptor: "(Lnet/minecraft/class_2960;)Ljava/util/List;",
			comments: [
				"Gets all of the available resources to the corresponding resource identifier.",
				"<p>",
				"Resources are returned in load order, or ascending order of priority, so the last element in the returned",
				"list is what would be returned normally by {@link #getResource}",
				"<p>",
				"Each resource entry in this returned list contains the name of the resource pack its from and a way to open the resource.",
				"",
				"@return a list of the available resources to the corresponding resource identifier"
			],
			params: {
				"1": {
					name: "id",
					comments: "the resource identifier to search for"
				}
			}
		},
		{
			source: "method_14488",
			name: "findResources",
			descriptor: "(Ljava/lang/String;Ljava/util/function/Predicate;)Ljava/util/Map;",
			comments: [
				"Returns a map of identifiers and sourced resources matching a path predicate.",
				"<p>",
				"Scanning begins in {@code startingPath} and each candidate file present under that directory",
				"will be offered up to the predicate to decide whether it should be included or not.",
				"",
				"@return the map matching identifiers and sourced resources"
			],
			params: {
				"1": {
					name: "startingPath",
					comments: "the starting path to begin scanning from"
				},
				"2": {
					name: "pathFilter",
					comments: "a predicate to determine whether a path should be included or not"
				}
			}
		},
		{
			source: "method_41265",
			name: "findAllResources",
			descriptor: "(Ljava/lang/String;Ljava/util/function/Predicate;)Ljava/util/Map;",
			comments: [
				"Returns a map of identifiers and all sourced resources matching a path predicate.",
				"<p>",
				"Scanning begins in {@code startingPath} and each candidate file present under that directory",
				"will be offered up to the predicate to decide whether it should be included or not.",
				"",
				"@return the map matching identifiers and sourced resources"
			],
			params: {
				"1": {
					name: "startingPath",
					comments: "the starting path to begin scanning from"
				},
				"2": {
					name: "pathFilter",
					comments: "a predicate to determine whether a path should be included or not"
				}
			}
		},
		{
			source: "method_29213",
			name: "streamPacks",
			descriptor: "()Ljava/util/stream/Stream;",
			comments: "{@return a stream of the loaded resource pack layers in increasing order of priority}"
		}
	],
	classes: [
		{
			source: "class_5353",
			name: "Empty",
			comments: "Represents a resource manager that does not hold any resources."
		}
	]
}
