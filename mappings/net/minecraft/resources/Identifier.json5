{
	source: "net/minecraft/class_2960",
	name: "net/minecraft/resources/Identifier",
	comments: [
		"Represents an immutable identifier used to identify things",
		"using a combination of a {@linkplain #namespace() namespace} and a {@linkplain #path() path}.",
		"Identifiers should always be compared using {@link #equals} method, not {@code ==}.",
		"<p>",
		"The namespace and path must contain only lowercase letters ({@code [a-z]}), digits ({@code [0-9]}),",
		"or the characters {@code '_'}, {@code '.'}, and {@code '-'}.",
		"The path can also contain the standard path separator {@code '/'}.",
		"",
		"@see net.minecraft.resources.ResourceKey"
	],
	fields: [
		{
			source: "field_33380",
			name: "NAMESPACE_SEPARATOR",
			descriptor: "C",
			comments: "The separator between the namespace and the path whose value is {@value}."
		},
		{
			source: "field_33381",
			name: "DEFAULT_NAMESPACE",
			descriptor: "Ljava/lang/String;",
			comments: "The default namespace whose value is {@value}."
		}
	],
	methods: [
		{
			source: "<init>",
			descriptor: "(Ljava/lang/String;Ljava/lang/String;)V",
			params: {
				"1": {
					name: "namespace"
				},
				"2": {
					name: "path"
				}
			}
		},
		{
			source: "method_12836",
			name: "namespace",
			descriptor: "()Ljava/lang/String;",
			comments: [
				"{@return the namespace of the identifier}",
				"<p>",
				"This returns {@value #DEFAULT_NAMESPACE} for identifiers created without an explicit namespace."
			]
		},
		{
			source: "method_12832",
			name: "path",
			descriptor: "()Ljava/lang/String;",
			comments: "{@return the path of the identifier}"
		},
		{
			source: "method_60654",
			name: "of",
			descriptor: "(Ljava/lang/String;)Lnet/minecraft/class_2960;",
			params: {
				"0": {
					name: "id"
				}
			}
		},
		{
			source: "method_60655",
			name: "of",
			descriptor: "(Ljava/lang/String;Ljava/lang/String;)Lnet/minecraft/class_2960;",
			params: {
				"0": {
					name: "namespace",
					comments: "the namespace of the identifier"
				},
				"1": {
					name: "path",
					comments: "the path of the identifier"
				}
			}
		},
		{
			source: "method_60656",
			name: "ofDefault",
			descriptor: "(Ljava/lang/String;)Lnet/minecraft/class_2960;",
			comments: [
				"Creates a new identifier within the default namespace (whose value is {@value #DEFAULT_NAMESPACE})",
				"with the given path.",
				"",
				"@return a new identifier within the default namespace with the given path"
			],
			params: {
				"0": {
					name: "path",
					comments: "the path of the identifier"
				}
			}
		},
		{
			source: "method_60936",
			name: "ofValidated",
			descriptor: "(Ljava/lang/String;Ljava/lang/String;)Lnet/minecraft/class_2960;",
			params: {
				"0": {
					name: "namespace",
					comments: "the namespace of the identifier"
				},
				"1": {
					name: "path",
					comments: "the path of the identifier"
				}
			}
		},
		{
			source: "method_12829",
			name: "tryParse",
			descriptor: "(Ljava/lang/String;)Lnet/minecraft/class_2960;",
			comments: [
				"{@return {@code id} parsed as an identifier, or {@code null} if it cannot be parsed}",
				"",
				"@see #tryParse(String, String)"
			],
			params: {
				"0": {
					name: "id",
					comments: "the identifier to parse"
				}
			}
		},
		{
			source: "method_43902",
			name: "tryParse",
			descriptor: "(Ljava/lang/String;Ljava/lang/String;)Lnet/minecraft/class_2960;",
			comments: [
				"{@return an identifier from the provided {@code namespace} and {@code path}, or {@code null} if either argument is invalid}",
				"",
				"@see #tryParse(String)"
			],
			params: {
				"0": {
					name: "namespace",
					comments: "the namespace of the identifier to parse"
				},
				"1": {
					name: "path",
					comments: "the path of the identifier to parse"
				}
			}
		},
		{
			source: "method_42094",
			name: "toTranslationKey",
			descriptor: "()Ljava/lang/String;",
			comments: [
				"{@return the full translation key of this identifier}",
				"<p>",
				"<strong>Warning</strong>: this method does not replace any slash in the path with dots.",
				"",
				"@see #toTranslationKey(String)",
				"@see #toTranslationKey(String, String)",
				"@see #toShortTranslationKey()"
			]
		},
		{
			source: "method_42093",
			name: "toTranslationKey",
			descriptor: "(Ljava/lang/String;)Ljava/lang/String;",
			comments: [
				"{@return the {@linkplain #toTranslationKey() full translation key of this identifier} prefixed with {@code prefix} and a dot}",
				"<p>",
				"<strong>Warning</strong>: this method does not replace any slash in the path with dots.",
				"",
				"@see #toTranslationKey()",
				"@see #toTranslationKey(String, String)",
				"@see #toShortTranslationKey()"
			],
			params: {
				"1": {
					name: "prefix",
					comments: "the prefix of the translation key"
				}
			}
		},
		{
			source: "method_48747",
			name: "toTranslationKey",
			descriptor: "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
			comments: [
				"{@return the {@linkplain #toTranslationKey() full translation key of this identifier} prefixed with {@code prefix} and a dot,",
				"and suffixed with a dot and {@code suffix}}",
				"<p>",
				"<strong>Warning</strong>: this method does not replace any slash in the path with dots.",
				"",
				"@see #toTranslationKey()",
				"@see #toTranslationKey(String)",
				"@see #toShortTranslationKey()"
			],
			params: {
				"1": {
					name: "prefix",
					comments: "the prefix of the translation key"
				},
				"2": {
					name: "suffix",
					comments: "the suffix of the translation key"
				}
			}
		},
		{
			source: "method_43903",
			name: "toShortTranslationKey",
			descriptor: "()Ljava/lang/String;",
			comments: [
				"{@return the short translation key, with the default namespace omitted if present}",
				"",
				"@see #toTranslationKey()",
				"@see #toTranslationKey(String)",
				"@see #toTranslationKey(String, String)"
			]
		},
		{
			source: "method_12831",
			name: "isCharValid",
			descriptor: "(C)Z",
			params: {
				"0": {
					name: "c"
				}
			}
		},
		{
			source: "equals",
			descriptor: "(Ljava/lang/Object;)Z",
			params: {
				"1": {
					name: "o"
				}
			}
		},
		{
			source: "method_12833",
			name: "compareTo",
			descriptor: "(Lnet/minecraft/class_2960;)I",
			params: {
				"1": {
					name: "o"
				}
			}
		}
	],
	classes: [
		{
			source: "class_2961",
			name: "Serializer"
		}
	]
}
