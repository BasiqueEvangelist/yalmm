{
	source: "net/minecraft/class_4587",
	name: "com/mojang/blaze3d/vertex/MatrixStack",
	comments: [
		"A stack of transformation matrices used to specify how 3D objects are",
		"{@linkplain #translate translated}, {@linkplain #scale scaled} or",
		"{@linkplain #rotate rotated} in 3D space. Each entry consists of a",
		"{@linkplain Entry#model model matrix} and its",
		"corresponding {@linkplain Entry#normal normal matrix}.",
		"<p>",
		"By putting matrices in a stack, a transformation can be expressed",
		"relative to another. You can {@linkplain #push push}, transform,",
		"render and {@linkplain #pop pop}, which allows you to restore the",
		"original matrix after rendering.",
		"<p>",
		"An entry of identity matrix is pushed when a stack is created. This",
		"means that a stack is {@linkplain #isEmpty empty} if and only if the",
		"stack contains exactly one entry."
	],
	fields: [
		{
			source: "field_20898",
			name: "stack",
			descriptor: "Ljava/util/Deque;"
		}
	],
	methods: [
		{
			source: "method_22903",
			name: "push",
			descriptor: "()V",
			comments: [
				"Pushes a new model and normal matrix onto this stack."
			]
		},
		{
			source: "method_22909",
			name: "pop",
			descriptor: "()V",
			comments: [
				"Pops the current entry from this stack."
			]
		},
		{
			source: "method_23760",
			name: "peek",
			descriptor: "()Lnet/minecraft/class_4587$class_4665;",
			comments: [
				"{@return the current set of model and normal matrices that are being manipulated from the stack}"
			]
		},
		{
			source: "method_22911",
			name: "isEmpty",
			descriptor: "()Z",
			comments: [
				"{@return {@code true} if the matrix stack is empty, or {@code false} otherwise}"
			]
		},
		{
			source: "method_34426",
			name: "useIdentity",
			descriptor: "()V",
			comments: [
				"Sets the identity matrix for the current model and normal matrices."
			]
		},
		{
			source: "method_46416",
			name: "translate",
			descriptor: "(FFF)V",
			comments: [
				"Translates the model."
			],
			params: {
				"1": {
					name: "x",
					comments: [
						"the translation amount on the X axis"
					]
				},
				"2": {
					name: "y",
					comments: [
						"the translation amount on the Y axis"
					]
				},
				"3": {
					name: "z",
					comments: [
						"the translation amount of the Z axis"
					]
				}
			}
		},
		{
			source: "method_22904",
			name: "translate",
			descriptor: "(DDD)V",
			comments: [
				"Translates the model."
			],
			params: {
				"1": {
					name: "x",
					comments: [
						"the translation amount on the X axis"
					]
				},
				"3": {
					name: "y",
					comments: [
						"the translation amount on the Y axis"
					]
				},
				"5": {
					name: "z",
					comments: [
						"the translation amount of the Z axis"
					]
				}
			}
		},
		{
			source: "method_22905",
			name: "scale",
			descriptor: "(FFF)V",
			comments: [
				"Scales the current model and normal matrices."
			],
			params: {
				"1": {
					name: "x",
					comments: [
						"the scaling factor on the X axis"
					]
				},
				"2": {
					name: "y",
					comments: [
						"the scaling factor on the Y axis"
					]
				},
				"3": {
					name: "z",
					comments: [
						"the scaling factor on the Z axis"
					]
				}
			}
		},
		{
			source: "method_34425",
			name: "multiply",
			descriptor: "(Lorg/joml/Matrix4f;)V",
			comments: [
				"Multiplies the current model matrix by the given matrix.",
				"<p>",
				"This does not update the normal matrix unlike other transformation methods."
			],
			params: {
				"1": {
					name: "matrix",
					"comments": [
						"the matrix to multiply with"
					]
				}
			}
		},
		{
			source: "method_22907",
			name: "rotate",
			descriptor: "(Lorg/joml/Quaternionf;)V",
			comments: [
				"Applies the rotation transformation of the given {@link Quaternionf} to the current matrix."
			],
			params: {
				"1": {
					name: "quaternion",
					params: [
						"the rotation transformation quaternion"
					]
				}
			}
		},
		{
			source: "method_49278",
			name: "rotateAround",
			descriptor: "(Lorg/joml/Quaternionf;FFF)V",
			comments: [
				"Applies the rotation transformation of the given {@link Quaternionf} to the current matrix",
				"while using {@code (oX, oY, oZ)} as the rotation origin."
			],
			params: {
				"1": {
					name: "quaternion",
					comments: [
						"the rotation transformation quaternion"
					]
				},
				"2": {
					name: "oX",
					comments: [
						"the X-coordinate of the rotation origin"
					]
				},
				"3": {
					name: "oY",
					comments: [
						"the Y-coordinate of the rotation origin"
					]
				},
				"4": {
					name: "oZ",
					comments: [
						"the Z-coordinate of the rotation origin"
					]
				}
			}
		}
	],
	classes: [
		{
			source: "class_4665",
			name: "Entry",
			comments: [
				"Represents an entry of a {@linkplain MatrixStack matrix stack} which contains a model and normal matrices."
			],
			fields: [
				{
					source: "field_21327",
					name: "modelMatrix",
					descriptor: "Lorg/joml/Matrix4f;"
				},
				{
					source: "field_21328",
					name: "normalMatrix",
					descriptor: "Lorg/joml/Matrix3f;"
				}
			],
			methods: [
				{
					source: "method_23761",
					name: "model",
					descriptor: "()Lorg/joml/Matrix4f;",
					comments: [
						"{@return the model matrix}",
						"<p>",
						"The model matrix contains the position and rotation data needed for a model to render."
					]
				},
				{
					source: "method_23762",
					name: "normal",
					descriptor: "()Lorg/joml/Matrix3f;",
					comments: [
						"{@return the normal matrix}",
						"<p>",
						"The normal matrix is used to transform normal vectors of a model to render."
					]
				}
			]
		}
	]
}